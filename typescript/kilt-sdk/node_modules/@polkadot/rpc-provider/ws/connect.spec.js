"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _ = _interopRequireDefault(require("./"));

var _mockWs = require("../../test/mockWs");

// Copyright 2017-2019 @polkadot/rpc-provider authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('onConnect', () => {
  let mock;
  beforeEach(() => {
    mock = (0, _mockWs.mockWs)([]);
  });
  afterEach(() => {
    if (mock) {
      mock.done();
    }
  });
  it('Does not connect when autoConnect is false', () => {
    const provider = new _.default(_mockWs.TEST_WS_URL, false); // We need to access the private WsProvider property 'websocket' here which would otherwise trigger a tslint error.

    expect(provider.websocket).toBeNull();
  });
  it('Does connect when autoConnect is true', () => {
    const provider = new _.default(_mockWs.TEST_WS_URL, true);
    expect(provider.websocket).not.toBeNull();
  });
  it('Creates a new WebSocket instance by calling the connect() method', () => {
    const provider = new _.default(_mockWs.TEST_WS_URL, false);
    expect(provider.websocket).toBeNull();
    provider.connect();
    expect(provider.websocket).not.toBeNull();
    expect(provider.websocket instanceof WebSocket).toBe(true);
  });
  it('Creates the on handlers', () => {
    const provider = new _.default(_mockWs.TEST_WS_URL);
    expect(provider.websocket).not.toBeNull();
    expect(provider.websocket).toEqual(expect.objectContaining({
      listeners: expect.objectContaining({
        close: [expect.any(Function)],
        error: [expect.any(Function)],
        message: [expect.any(Function)],
        open: [expect.any(Function)]
      })
    }));
  });
});
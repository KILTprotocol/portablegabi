import { MetadataV0, MetadataV1 } from '../interfaces/metadata';
import Struct from '../codec/Struct';
import MagicNumber from './MagicNumber';
import MetadataV2 from './v2';
import MetadataV3 from './v3';
import MetadataV4 from './v4';
import MetadataV5 from './v5';
import MetadataV6 from './v6';
import MetadataV7 from './v7';
import MetadataV8 from './v8';
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
export default class MetadataVersioned extends Struct {
    private _converted;
    constructor(value?: any);
    private assertVersion;
    private getVersion;
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */
    get asCallsOnly(): MetadataVersioned;
    /**
     * @description Returns the wrapped metadata as a V0 object
     */
    get asV0(): MetadataV0;
    /**
     * @description Returns the wrapped values as a V1 object
     */
    get asV1(): MetadataV1;
    /**
     * @description Returns the wrapped values as a V2 object
     */
    get asV2(): MetadataV2;
    /**
     * @description Returns the wrapped values as a V3 object
     */
    get asV3(): MetadataV3;
    /**
     * @description Returns the wrapped values as a V4 object
     */
    get asV4(): MetadataV4;
    /**
     * @description Returns the wrapped values as a V5 object
     */
    get asV5(): MetadataV5;
    /**
     * @description Returns the wrapped values as a V6 object
     */
    get asV6(): MetadataV6;
    /**
     * @description Returns the wrapped values as a V7 object
     */
    get asV7(): MetadataV7;
    /**
     * @description Returns the wrapped values as a V8 object
     */
    get asV8(): MetadataV8;
    /**
     * @description Returns the wrapped values as a latest version object
     */
    get asLatest(): MetadataV8;
    /**
     * @description
     */
    get magicNumber(): MagicNumber;
    /**
     * @description the metadata wrapped
     */
    private get metadata();
    /**
     * @description the metadata version this structure represents
     */
    get version(): number;
    getUniqTypes(throwError: boolean): string[];
}

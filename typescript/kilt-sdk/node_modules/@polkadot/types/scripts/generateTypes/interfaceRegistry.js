"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateInterfaceRegistry;

var _fs = _interopRequireDefault(require("fs"));

var definitions = _interopRequireWildcard(require("../../interfaces/definitions"));

var primitiveClasses = _interopRequireWildcard(require("../../primitive"));

var _util = require("../util");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Generate `packages/types/src/interfaceRegistry.ts`, the registry of all interfaces
function generateInterfaceRegistry() {
  console.log('Writing interfaceRegistry.ts');
  const imports = (0, _util.createImports)();
  const primitives = Object.keys(primitiveClasses).filter(name => !!name.indexOf('Generic')).reduce((accumulator, primitiveName) => {
    (0, _util.setImports)(imports, [primitiveName]);
    return [accumulator, (0, _util.getDerivedTypes)(primitiveName, primitiveName, imports).map((0, _util.indent)(2)).join('\n')].join('\n');
  }, ''); // eslint-disable-next-line @typescript-eslint/no-unused-vars

  const srml = Object.entries(definitions).reduce((accumulator, _ref) => {
    let [_defName, {
      types
    }] = _ref;
    (0, _util.setImports)(imports, Object.keys(types));
    return [accumulator, ...Object.keys(types).map(type => (0, _util.getDerivedTypes)(type, types[type], imports).map((0, _util.indent)(2)).join('\n'))].join('\n');
  }, '');
  const header = (0, _util.createImportCode)(_util.HEADER, [{
    file: '@polkadot/types/codec',
    types: Object.keys(imports.codecTypes).filter(name => name !== 'Tuple')
  }, {
    file: '@polkadot/types/primitive',
    types: Object.keys(imports.primitiveTypes)
  }, ...Object.keys(imports.localTypes).map(moduleName => ({
    file: "@polkadot/types/interfaces/".concat(moduleName),
    types: Object.keys(imports.localTypes[moduleName])
  }))]);
  const interfaceStart = 'export interface InterfaceRegistry {';
  const interfaceEnd = '\n}';

  _fs.default.writeFileSync('packages/types/src/interfaceRegistry.ts', header.concat(interfaceStart).concat(primitives).concat(srml).concat(interfaceEnd).concat(_util.FOOTER), {
    flag: 'w'
  });
}
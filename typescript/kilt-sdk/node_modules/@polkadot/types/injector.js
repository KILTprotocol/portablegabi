"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectTypes = injectTypes;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _create = require("./codec/create");

var definitions = _interopRequireWildcard(require("./interfaces/definitions"));

var baseTypes = _interopRequireWildcard(require("./index.types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @description A utility method that injects all the srml definitions into the type registry
 */
function injectTypes() {
  const registry = (0, _create.getTypeRegistry)(); // since these are classes, the are active immediately

  registry.register(_objectSpread({}, baseTypes)); // since these are definitions, they would only get created when needed

  Object.values(definitions).forEach((_ref) => {
    let {
      types
    } = _ref;
    return registry.register(types);
  });
}

injectTypes();
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LATEST_EXTRINSIC_VERSION", {
  enumerable: true,
  get: function get() {
    return _Extrinsic.TRANSACTION_VERSION;
  }
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _create = require("../../codec/create");

var _Base = _interopRequireDefault(require("../../codec/Base"));

var _Compact = _interopRequireDefault(require("../../codec/Compact"));

var _constants = require("./constants");

var _Extrinsic = require("./v4/Extrinsic");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const VERSIONS = ['ExtrinsicUnknown', // v0 is unknown
'ExtrinsicV1', 'ExtrinsicV2', 'ExtrinsicV3', 'ExtrinsicV4'];

/**
 * @name Extrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
class Extrinsic extends _Base.default {
  constructor(value) {
    let {
      version
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(Extrinsic.decodeExtrinsic(value, version));
  }

  static newFromValue(value, version) {
    if (value instanceof Extrinsic) {
      return value.raw;
    }

    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;
    const type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy

    return (0, _create.createType)(type, value, {
      isSigned,
      version
    });
  }

  static decodeExtrinsic(value) {
    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.DEFAULT_VERSION;

    if (Array.isArray(value) || (0, _util.isHex)(value)) {
      return Extrinsic.decodeU8aLike(value, version);
    } else if ((0, _util.isU8a)(value)) {
      return Extrinsic.decodeU8a(value, version);
    } else if (value instanceof (0, _create.ClassOf)('Call')) {
      return Extrinsic.newFromValue({
        method: value
      }, version);
    }

    return Extrinsic.newFromValue(value, version);
  }

  static decodeU8aLike(value, version) {
    // Instead of the block below, it should simply be:
    // return Extrinsic.decodeExtrinsic(hexToU8a(value as string));
    const u8a = (0, _util.u8aToU8a)(value); // HACK 11 Jan 2019 - before https://github.com/paritytech/substrate/pull/1388
    // extrinsics didn't have the length, cater for both approaches. This is very
    // inconsistent with any other `Vec<u8>` implementation

    const [offset, length] = _Compact.default.decodeU8a(u8a);

    const withPrefix = u8a.length === offset + length.toNumber();
    return Extrinsic.decodeU8a(withPrefix ? u8a : _Compact.default.addLengthPrefix(u8a), version);
  }

  static decodeU8a(value, version) {
    if (!value.length) {
      return Extrinsic.newFromValue(new Uint8Array(), version);
    }

    const [offset, length] = _Compact.default.decodeU8a(value);

    const total = offset + length.toNumber();
    (0, _util.assert)(total <= value.length, "Extrinsic: required length less than remainder, expected at least ".concat(total, ", found ").concat(value.length));
    const data = value.subarray(offset, total);
    return Extrinsic.newFromValue(data.subarray(1), data[0]);
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */


  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */


  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */


  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */


  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */


  get era() {
    return this.raw.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` is method has `Origin` argument (compatibility with [Call])
   */


  get hasOrigin() {
    return this.method.hasOrigin;
  }
  /**
   * @description `true` id the extrinsic is signed
   */


  get isSigned() {
    return this.raw.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */


  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */


  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */


  get method() {
    return this.raw.method;
  }
  /**
   * @description The nonce for this extrinsic
   */


  get nonce() {
    return this.raw.signature.nonce;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */


  get signature() {
    return this.raw.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.raw.signature.signer;
  }
  /**
   * @description Forwards compat
   */


  get tip() {
    return this.raw.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */


  get type() {
    return this.raw.version;
  }
  /**
   * @description Returns the encoded version flag
  */


  get version() {
    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */


  addSignature(signer, signature, payload) {
    this.raw.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.raw.sign(account, options);
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Extrinsic';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this.raw.toU8a(isBare));
    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);
  }

}

exports.default = Extrinsic;
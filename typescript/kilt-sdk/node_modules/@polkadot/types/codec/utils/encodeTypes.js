"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paramsNotation = paramsNotation;
exports.encodeType = encodeType;
exports.displayType = displayType;
exports.withTypeString = withTypeString;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _types = require("../types");

var _util = require("@polkadot/util");

var _create = require("../create");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const SPECIAL_TYPES = ['AccountId', 'AccountIndex', 'Address', 'Balance'];

const identity = value => value;

function paramsNotation(outer, inner) {
  let transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;
  let arrayStr = '';

  if (inner) {
    arrayStr = '<' + (Array.isArray(inner) ? inner : [inner]).map(transform).join(', ') + '>';
  }

  return "".concat(outer).concat(arrayStr);
}

function encodeWithParams(typeDef) {
  let outer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : typeDef.displayName || typeDef.type;
  const {
    params
  } = typeDef;
  return paramsNotation(outer, params, // eslint-disable-next-line @typescript-eslint/no-use-before-define
  param => displayType(param));
}

function encodeSubTypes(sub, asEnum) {
  return "{ ".concat(asEnum ? '"_enum": { ' : '').concat(sub.map(type => "\"".concat(type.name, "\": \"").concat(encodeWithParams(type), "\"")).join(', ')).concat(asEnum ? '" }"' : '', " }");
}

function encodeEnum(typeDef) {
  (0, _util.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Enum type');
  const sub = typeDef.sub;
  const isClikeEnum = sub.reduce((bool, _ref) => {
    let {
      type
    } = _ref;
    return bool && type === 'Null';
  }, true);

  if (isClikeEnum) {
    return "[".concat(sub.map((_ref2) => {
      let {
        name
      } = _ref2;
      return "\"".concat(name, "\"");
    }).join(', '), "]");
  }

  return encodeSubTypes(sub, true);
}

function encodeStruct(typeDef) {
  (0, _util.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Struct type');
  const sub = typeDef.sub;
  return encodeSubTypes(sub);
}

function encodeTuple(typeDef) {
  (0, _util.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Tuple type');
  const sub = typeDef.sub;
  return "(".concat(sub.map(type => encodeWithParams(type)).join(', '), ")");
}

function encodeVecFixed(typeDef) {
  (0, _util.assert)(typeDef.ext, 'Unable to encode VecFixed type');
  const {
    type,
    length
  } = typeDef.ext;
  return "[".concat(encodeWithParams((0, _create.getTypeDef)(type)), ";").concat(length, "]");
} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
// in a compile-time error with the missing index)


const encoders = {
  [_types.TypeDefInfo.BTreeMap]: typeDef => encodeWithParams(typeDef, 'BTreeMap'),
  [_types.TypeDefInfo.Compact]: typeDef => encodeWithParams(typeDef, 'Compact'),
  [_types.TypeDefInfo.DoubleMap]: typeDef => encodeWithParams(typeDef, 'DoubleMap'),
  [_types.TypeDefInfo.Enum]: typeDef => encodeEnum(typeDef),
  [_types.TypeDefInfo.Linkage]: typeDef => encodeWithParams(typeDef, 'Linkage'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Null]: typeDef => 'Null',
  [_types.TypeDefInfo.Option]: typeDef => encodeWithParams(typeDef, 'Option'),
  [_types.TypeDefInfo.Plain]: typeDef => typeDef.displayName || typeDef.type,
  [_types.TypeDefInfo.Result]: typeDef => encodeWithParams(typeDef, 'Result'),
  [_types.TypeDefInfo.Set]: typeDef => typeDef.type,
  [_types.TypeDefInfo.Struct]: typeDef => encodeStruct(typeDef),
  [_types.TypeDefInfo.Tuple]: typeDef => encodeTuple(typeDef),
  [_types.TypeDefInfo.Vec]: typeDef => encodeWithParams(typeDef, 'Vec'),
  [_types.TypeDefInfo.VecFixed]: typeDef => encodeVecFixed(typeDef)
};

function encodeType(typeDef) {
  const encoder = encoders[typeDef.info];
  (0, _util.assert)(encoder, "Cannot encode type: ".concat(typeDef, "."));
  return encoder(typeDef);
}

function displayType(typeDef) {
  if (typeDef.displayName) {
    return encodeWithParams(typeDef);
  }

  switch (typeDef.info) {
    case _types.TypeDefInfo.Struct:
    case _types.TypeDefInfo.Enum:
      return encodeWithParams(typeDef);

    default:
      return encodeType(typeDef);
  }
}

function withTypeString(typeDef) {
  return _objectSpread({}, typeDef, {
    type: SPECIAL_TYPES.includes(typeDef.name) ? typeDef.name : encodeType(typeDef)
  });
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("../injector");

var _Text = _interopRequireDefault(require("../primitive/Text"));

var _U = _interopRequireDefault(require("../primitive/U32"));

var _Struct = _interopRequireDefault(require("./Struct"));

var _BTreeMap = _interopRequireDefault(require("./BTreeMap"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const mockU32TextMap = new Map();
mockU32TextMap.set(new _Text.default('bazzing'), new _U.default(69));
const mockU32TextMapString = '{"bazzing":69}';
const mockU32TextMapObject = {
  bazzing: 69
};
const mockU32TextMapHexString = '0x041c62617a7a696e6745000000';
const mockU32TextMapUint8Array = Uint8Array.from([4, 28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]);
const mockU32U32Map = new Map();
mockU32U32Map.set(new _U.default(1), new _U.default(2));
mockU32U32Map.set(new _U.default(23), new _U.default(24));
mockU32U32Map.set(new _U.default(28), new _U.default(30));
mockU32U32Map.set(new _U.default(45), new _U.default(80));
const mockU32U32MapString = '{"1":2,"23":24,"28":30,"45":80}';
const mockU32U32MapObject = {
  1: 2,
  23: 24,
  28: 30,
  45: 80
};
const mockU32U32MapHexString = '0x10043102000000083233180000000832381e00000008343550000000';
const mockU32U32MapUint8Array = Uint8Array.from([16, 4, 49, 2, 0, 0, 0, 8, 50, 51, 24, 0, 0, 0, 8, 50, 56, 30, 0, 0, 0, 8, 52, 53, 80, 0, 0, 0]);
describe('BTreeMap', () => {
  describe('decoding', () => {
    const testDecode = (type, input, output) => it("can decode from ".concat(type), () => {
      const s = new _BTreeMap.default(_Text.default, _U.default, input);
      expect(s.toString()).toBe(output);
    });

    testDecode('map', mockU32TextMap, mockU32TextMapString);
    testDecode('hex', mockU32TextMapHexString, mockU32TextMapString);
    testDecode('Uint8Array', mockU32TextMapUint8Array, mockU32TextMapString);
    testDecode('map', mockU32U32Map, mockU32U32MapString);
    testDecode('hex', mockU32U32MapHexString, mockU32U32MapString);
    testDecode('Uint8Array', mockU32U32MapUint8Array, mockU32U32MapString);
  });
  describe('encoding', () => {
    const testEncode = (to, expected) => it("can encode ".concat(to), () => {
      const s = new _BTreeMap.default(_Text.default, _U.default, mockU32TextMap);
      expect(s[to]()).toEqual(expected);
    });

    testEncode('toHex', mockU32TextMapHexString);
    testEncode('toJSON', mockU32TextMapObject);
    testEncode('toU8a', mockU32TextMapUint8Array);
    testEncode('toString', mockU32TextMapString);
  });
  describe('encoding muple values', () => {
    const testEncode = (to, expected) => it("can encode ".concat(to), () => {
      const s = new _BTreeMap.default(_Text.default, _U.default, mockU32U32Map);
      expect(s[to]()).toEqual(expected);
    });

    testEncode('toHex', mockU32U32MapHexString);
    testEncode('toJSON', mockU32U32MapObject);
    testEncode('toU8a', mockU32U32MapUint8Array);
    testEncode('toString', mockU32U32MapString);
  });
  it('decodes null', () => {
    expect(new (_BTreeMap.default.with(_Text.default, _U.default))(null).toString()).toEqual('{}');
  });
  it('decodes within more complicated types', () => {
    const s = new _Struct.default({
      placeholder: _U.default,
      value: _BTreeMap.default.with(_Text.default, _U.default)
    });
    s.set('value', new _BTreeMap.default(_Text.default, _U.default, mockU32TextMap));
    expect(s.toString()).toBe('{"placeholder":0,"value":{"bazzing":69}}');
  });
  it('throws when it cannot decode', () => {
    expect(() => new (_BTreeMap.default.with(_Text.default, _U.default))('ABC')).toThrowError(/BTreeMap: cannot decode type/);
  });
  it('correctly encodes length', () => {
    expect(new (_BTreeMap.default.with(_Text.default, _U.default))(mockU32TextMap).encodedLength).toEqual(13);
  });
  it('generates sane toRawTypes', () => {
    expect(new (_BTreeMap.default.with(_Text.default, _U.default))().toRawType()).toBe('BTreeMap<Text,u32>');
    expect(new (_BTreeMap.default.with(_Text.default, _Text.default))().toRawType()).toBe('BTreeMap<Text,Text>');
    expect(new (_BTreeMap.default.with(_Text.default, _Struct.default.with({
      a: _U.default,
      b: _Text.default
    })))().toRawType()).toBe('BTreeMap<Text,{"a":"u32","b":"Text"}>');
  });
});
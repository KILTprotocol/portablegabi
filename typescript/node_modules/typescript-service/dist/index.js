"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var get_source_file_1 = require("./get-source-file");
var path_1 = require("path");
var fs_1 = require("fs");
function createService(_a) {
    var compilerOptions = _a.compilerOptions, configFile = _a.configFile;
    var _b = createTypescriptServices({ configFile: configFile, compilerOptions: compilerOptions }), program = _b.program, compilerHost = _b.compilerHost;
    var api = {
        getProgram: function () { return program; },
        getSourceFile: function (fileName, sourceText) {
            var sourceFile = program.getSourceFile(fileName);
            if (sourceFile === undefined) {
                fileName = fileName.replace(/\\/g, '/');
                var rootFileNames = program.getRootFileNames().concat([fileName]);
                program = ts.createProgram(rootFileNames, program.getCompilerOptions(), compilerHost, program);
                sourceFile = program.getSourceFile(fileName);
            }
            else if (sourceFile.text !== sourceText) {
                program = ts.createProgram(program.getRootFileNames(), program.getCompilerOptions(), compilerHost, program);
                sourceFile = program.getSourceFile(fileName);
            }
            return sourceFile || get_source_file_1.getSourceFile(program, fileName, sourceText);
        },
        getDiagnostics: function (fileName, sourceText) {
            var sourceFile = api.getSourceFile(fileName, sourceText);
            return program.getSyntacticDiagnostics(sourceFile).concat(program.getSemanticDiagnostics(sourceFile));
        },
    };
    return api;
}
exports.createService = createService;
function createTypescriptServices(_a) {
    var configFile = _a.configFile, _b = _a.projectDirectory, projectDirectory = _b === void 0 ? path_1.dirname(configFile) : _b, _c = _a.compilerOptions, compilerOptions = _c === void 0 ? {} : _c;
    var _d = ts.readConfigFile(configFile, ts.sys.readFile), config = _d.config, error = _d.error;
    if (error !== undefined) {
        throw new Error(ts.formatDiagnostics([error], {
            getCanonicalFileName: function (f) { return f; },
            getCurrentDirectory: process.cwd,
            getNewLine: function () { return '\n'; },
        }));
    }
    var parseConfigHost = {
        fileExists: function (path) {
            return fs_1.existsSync(path);
        },
        readDirectory: ts.sys.readDirectory,
        readFile: function (file) {
            return fs_1.readFileSync(file, 'utf8');
        },
        useCaseSensitiveFileNames: false,
    };
    config.compilerOptions = tslib_1.__assign({}, (config.compilerOptions || {}), compilerOptions);
    var parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, path_1.resolve(projectDirectory), {
        noEmit: true,
        sourceMap: false,
        inlineSources: false,
        inlineSourceMap: false,
    });
    if (parsed.errors !== undefined) {
        // ignore warnings and 'TS18003: No inputs were found in config file ...'
        var errors = parsed.errors.filter(function (d) { return d.category === ts.DiagnosticCategory.Error && d.code !== 18003; });
        if (errors.length !== 0) {
            throw new Error(ts.formatDiagnostics(errors, {
                getCanonicalFileName: function (f) { return f; },
                getCurrentDirectory: process.cwd,
                getNewLine: function () { return '\n'; },
            }));
        }
    }
    var compilerHost = ts.createCompilerHost(parsed.options, true);
    var program = ts.createProgram(parsed.fileNames, parsed.options, compilerHost);
    return { program: program, compilerHost: compilerHost };
}
//# sourceMappingURL=index.js.map
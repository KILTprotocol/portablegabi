"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDescriptor;

var _codec = require("@polkadot/types/codec");

var _util = require("@polkadot/util");

// Copyright 2017-2019 @polkadot/api-metadata authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * From the metadata of a function in the module's storage, generate the function
 * that will return the an [[CallFunction]].
 *
 * @param section - Name of the module section.
 * @param sectionIndex - Index of the module section in the modules array.
 * @param methodIndex - Index of the method inside the section.
 * @param callMetadata - Metadata of the call function.
 */
function createDescriptor(section, sectionIndex, methodIndex, callMetadata) {
  const callIndex = new Uint8Array([sectionIndex, methodIndex]);
  const expectedArgs = callMetadata.args;
  const funcName = (0, _util.stringCamelCase)(callMetadata.name.toString());

  const extrinsicFn = function extrinsicFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    (0, _util.assert)(expectedArgs.length.valueOf() === args.length, "Extrinsic ".concat(section, ".").concat(funcName, " expects ").concat(expectedArgs.length.valueOf(), " arguments, got ").concat(args.length, "."));
    return (0, _codec.createType)('Call', {
      args,
      callIndex
    }, callMetadata);
  };

  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section;

  extrinsicFn.toJSON = () => callMetadata.toJSON();

  return extrinsicFn;
}
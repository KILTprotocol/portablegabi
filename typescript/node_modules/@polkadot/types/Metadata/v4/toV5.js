"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toV5;

var _util = require("@polkadot/util");

var _codec = require("../../codec");

var _StorageHasher = _interopRequireDefault(require("../../primitive/StorageHasher"));

var _v = _interopRequireDefault(require("../v5"));

var _Metadata = require("../v5/Metadata");

var _Storage = require("../v5/Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const hasherMap = new Map([['blake2_128', 'Blake2_128'], ['blake2_256', 'Blake2_256'], ['twox_128', 'Twox128'], ['twox_256', 'Twox256'], ['twox_64_concat', 'Twox64Concat']]);

function toStorageHasher(text) {
  const mapped = hasherMap.get(text.toString());
  (0, _util.assert)(mapped, "Invalid Storage hasher: ".concat(text.toString()));
  return new _StorageHasher.default(mapped);
}
/**
 * Convert V4 StorageFunction to V5 StorageFunction
 */


function toV5StorageFunction(storageFn) {
  const {
    documentation,
    fallback,
    modifier,
    name,
    type
  } = storageFn;
  const [newType, index] = type.isPlainType ? [type, 0] : type.isMap ? [type.asMap, 1] : [(0, _codec.createType)('DoubleMapTypeV5', {
    hasher: type.asDoubleMap.hasher,
    key1: type.asDoubleMap.key1,
    key2: type.asDoubleMap.key2,
    value: type.asDoubleMap.value,
    key2Hasher: toStorageHasher(type.asDoubleMap.key2Hasher)
  }), 2];
  return new _Storage.StorageFunctionMetadata({
    documentation,
    fallback,
    name,
    modifier,
    type: new _Storage.StorageFunctionType(newType, index)
  });
}
/**
 * Convert from MetadataV4 to MetadataV5
 * See https://github.com/paritytech/substrate/pull/2836/files for details
 */


function toV5(_ref) {
  let {
    modules
  } = _ref;
  return new _v.default({
    modules: modules.map((_ref2) => {
      let {
        calls,
        events,
        name,
        prefix,
        storage
      } = _ref2;
      return new _Metadata.ModuleMetadataV5({
        name,
        prefix,
        storage: storage.isSome ? new _codec.Option(_codec.Vec.with(_Storage.StorageFunctionMetadata), storage.unwrap().map(toV5StorageFunction)) : undefined,
        calls,
        events
      });
    })
  });
}
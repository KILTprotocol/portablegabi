"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("../../injector");

var _registry = require("./registry");

var _Struct = _interopRequireDefault(require("../Struct"));

var _Text = _interopRequireDefault(require("../../primitive/Text"));

var _U = _interopRequireDefault(require("../../primitive/U32"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Copied from interfacesTs
function isChildClass(Parent, Child) {
  return Child // eslint-disable-next-line no-prototype-builtins
  ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}

describe('TypeRegistry', () => {
  let registry;
  beforeEach(() => {
    registry = (0, _registry.getTypeRegistry)();
  });
  it('handles non exist type', () => {
    expect(registry.get('non-exist')).toBeUndefined();
  });
  it('can register single type', () => {
    registry.register(_Text.default);
    expect(registry.get('Text')).toBe(_Text.default);
  });
  it('can register type with a different name', () => {
    registry.register('TextRenamed', _Text.default);
    expect(isChildClass(_Text.default, registry.get('TextRenamed'))).toBe(true);
  });
  describe('object registration', () => {
    it('can register multiple types', () => {
      registry.register({
        Text: _Text.default,
        U32Renamed: _U.default
      });
      expect(isChildClass(_Text.default, registry.get('Text'))).toBe(true);
      expect(isChildClass(_U.default, registry.get('U32Renamed'))).toBe(true);
    });
    it('can register recursive types', () => {
      registry.register({
        Recursive: {
          next: 'Option<Recursive>'
        }
      });
      expect(registry.hasDef('Recursive')).toBe(true);
      expect(registry.hasClass('Recursive')).toBe(false);
      const Recursive = registry.getOrThrow('Recursive');
      expect(registry.hasClass('Recursive')).toBe(true);
      const last = new Recursive({
        next: null
      });
      const first = new Recursive({
        next: last
      });
      expect(first.next.isSome).toBe(true);
      expect(first.next.unwrap().next.isSome).toBe(false);
    });
    it('can register cross-referencing types ()', () => {
      registry.register({
        A: {
          next: 'B'
        },
        B: {
          _enum: {
            End: null,
            Other: 'A'
          }
        }
      });
      const A = registry.getOrThrow('A');
      const B = registry.getOrThrow('B');
      expect(registry.hasClass('Recursive')).toBe(true);
      const last = new B({
        End: null
      });
      const first = new B({
        Other: new A({
          next: last
        })
      });
      expect(first.isOther).toBe(true);
    });
    it('can create types from string', () => {
      registry.register({
        U32Renamed: 'u32'
      });
      const Type = registry.getOrThrow('U32Renamed');
      expect(new Type() instanceof _U.default).toBe(true);
    });
    it('can create structs via definition', () => {
      registry.register({
        SomeStruct: {
          foo: 'u32',
          bar: 'Text'
        }
      });
      const SomeStruct = registry.get('SomeStruct');
      const struct = new SomeStruct({
        foo: 42,
        bar: 'testing'
      });
      expect(struct instanceof _Struct.default).toBe(true);
      expect(struct.foo.toNumber()).toEqual(42);
      expect(struct.bar.toString()).toEqual('testing');
    });
  });
});
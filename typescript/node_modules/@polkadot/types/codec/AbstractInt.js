"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_UINT_BITS = void 0;

var _bn = _interopRequireDefault(require("bn.js"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _U8a = _interopRequireDefault(require("./U8a"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const DEFAULT_UINT_BITS = 64;
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */
// TODO:
//   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?

exports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;

class AbstractInt extends _bn.default {
  constructor(isNegative) {
    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let bitLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_UINT_BITS;
    let isHexJson = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    super(AbstractInt.decodeAbstracInt(value, bitLength, isNegative));
    this._bitLength = void 0;
    this._isHexJson = void 0;
    this._isNegative = void 0;
    this._bitLength = bitLength;
    this._isHexJson = isHexJson;
    this._isNegative = isNegative;
  }

  static decodeAbstracInt(value, bitLength, isNegative) {
    // This function returns a string, which will be passed in the BN
    // constructor. It would be ideal to actually return a BN, but there's a
    // bug: https://github.com/indutny/bn.js/issues/206.
    if ((0, _util.isHex)(value, -1, true)) {
      return (0, _util.hexToBn)(value, {
        isLe: false,
        isNegative
      }).toString();
    } else if ((0, _util.isU8a)(value)) {
      return AbstractInt.decodeAbstracIntU8a(value, bitLength, isNegative);
    } else if ((0, _util.isString)(value)) {
      return new _bn.default(value, 10).toString();
    }

    return (0, _util.bnToBn)(value).toString();
  }

  static decodeAbstracIntU8a(value, bitLength, isNegative) {
    if (!value.length) {
      return '0';
    }

    try {
      // NOTE When passing u8a in (typically from decoded data), it is always Little Endian
      return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {
        isLe: true,
        isNegative
      }).toString();
    } catch (error) {
      throw new Error("AbstractInt: failed on ".concat(JSON.stringify(value), ":: ").concat(error.message));
    }
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this._bitLength / 8;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return new _U8a.default((0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */


  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return this._bitLength;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  eq(other) {
    // Here we are actually overriding the built-in .eq to take care of both
    // number and BN inputs (no `.eqn` needed) - numbers will be converted
    return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {
      isLe: false,
      isNegative: this._isNegative
    }) : (0, _util.bnToBn)(other));
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */


  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    // FIXME this return type should by string | number, but BN's return type
    // is string.
    // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
    return this._isHexJson || super.bitLength() > 52 ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */
  toString(base) {
    // only included here since we do not inherit docs
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


}

exports.default = AbstractInt;
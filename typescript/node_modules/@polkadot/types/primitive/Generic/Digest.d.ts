import { AuthorityId } from '../../interfaces/consensus';
import { Consensus, Hash, PreRuntime, Seal, SealV0 } from '../../interfaces/runtime';
import Enum from '../../codec/Enum';
import Struct from '../../codec/Struct';
import Vec from '../../codec/Vec';
import Bytes from '../Bytes';
/**
 * @name DigestItem
 * @description
 * A [[Enum]] the specifies the specific item in the logs of a [[Digest]]
 */
export declare class DigestItem extends Enum {
    constructor(value: any);
    /**
     * @description Returns the item as a [[Vec<AuthorityId>]]
     */
    get asAuthoritiesChange(): Vec<AuthorityId>;
    /**
     * @description Returns the item as a [[ChangesTrieRoot]]
     */
    get asChangesTrieRoot(): Hash;
    /**
     * @desciption Retuns the item as a [[Consensus]]
     */
    get asConsensus(): Consensus;
    /**
     * @description Returns the item as a [[Bytes]]
     */
    get asOther(): Bytes;
    /**
     * @description Returns the item as a [[PreRuntime]]
     */
    get asPreRuntime(): PreRuntime;
    /**
     * @description Returns the item as a [[Seal]]
     */
    get asSeal(): Seal;
    /**
     * @description Returns the item as a [[SealV0]]
     */
    get asSealV0(): SealV0;
    /**
     * @description Returns true on [[AuthoritiesChange]]
     */
    get isAuthoritiesChange(): boolean;
    /**
     * @description Returns true on [[ChangesTrieRoot]]
     */
    get isChangesTrieRoot(): boolean;
    /**
     * @description Returns true on [[Consensus]]
     */
    get isConsensus(): boolean;
    /**
     * @description Returns true on [[Other]]
     */
    get isOther(): boolean;
    /**
     * @description Returns true on [[PreRuntime]]
     */
    get isPreRuntime(): boolean;
    /**
     * @description Returns true on [[Seal]]
     */
    get isSeal(): boolean;
    /**
     * @description Returns true on [[SealV0]]
     */
    get isSealV0(): boolean;
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers. For logs, we overrides to produce the hex version (sligning with substrate gives in actual JSON responses)
     */
    toJSON(): string;
    /**
     * @description Returns the type of engine
     */
    get type(): string;
}
/**
 * @name Digest
 * @description
 * A [[Header]] Digest
 */
export default class Digest extends Struct {
    constructor(value: any);
    /**
     * @description The [[DigestItem]] logs
     */
    get logs(): Vec<DigestItem>;
    /**
     * @description The [[DigestItem]] logs, filtered, filter items included. This is useful for derive functionality where only a certain type of log is to be returned.
     */
    logsWith(...include: string[]): Vec<DigestItem>;
    /**
     * @description The [[DigestItem]] logs, filtered, filter items exluded. This is useful for stripping headers for eg. WASM runtime execution.
     */
    logsWithout(...exclude: string[]): Vec<DigestItem>;
}

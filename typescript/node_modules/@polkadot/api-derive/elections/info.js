"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function deriveElections(_ref) {
  let [candidates, [candidateCount, desiredSeats, members, nextVoterSet, termDuration, voteCount, voterCount]] = _ref;
  return {
    candidates,
    candidateCount,
    desiredSeats,
    nextVoterSet,
    members: members.map((_ref2) => {
      let [accountId] = _ref2;
      return [accountId, (0, _types.createType)('Balance')];
    }),
    runnersUp: [],
    termDuration,
    voteCount,
    voterCount
  };
}

function queryElections(api) {
  // NOTE We have an issue where candidates can return `null` for an empty array
  return (0, _rxjs.combineLatest)([api.query.elections.candidates(), api.queryMulti([api.query.elections.candidateCount, api.query.elections.desiredSeats, api.query.elections.members, api.query.elections.nextVoterSet, api.query.elections.termDuration, api.query.elections.voteCount, api.query.elections.voterCount])]).pipe((0, _operators.map)(deriveElections));
}

function derivePhragmen(candidates, members, runnersUp, candidacyBond, desiredSeats, termDuration, votingBond) {
  return {
    candidates,
    candidateCount: (0, _types.createType)('u32', candidates.length),
    candidacyBond,
    desiredSeats,
    members,
    runnersUp,
    termDuration,
    votingBond
  };
}

function queryPhragmen(api) {
  // NOTE We have an issue where candidates can return `null` for an empty array, hence
  // we are not using multi queries here, so empty array is empty (instead of space-filled)
  return (0, _rxjs.combineLatest)([api.query.electionsPhragmen.candidates(), api.query.electionsPhragmen.members(), api.query.electionsPhragmen.runnersUp()]).pipe((0, _operators.map)((_ref3) => {
    let [candidates, members, runnersUp] = _ref3;
    return derivePhragmen(candidates, members, runnersUp, api.consts.electionsPhragmen.candidacyBond, api.consts.electionsPhragmen.desiredMembers, api.consts.electionsPhragmen.termDuration, api.consts.electionsPhragmen.votingBond);
  }));
}
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */


function info(api) {
  const query = api.query.electionsPhragmen ? queryPhragmen : queryElections;
  return () => query(api).pipe((0, _util.drr)());
}
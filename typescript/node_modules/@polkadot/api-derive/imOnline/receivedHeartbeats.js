"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.receivedHeartbeats = receivedHeartbeats;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */
function receivedHeartbeats(api) {
  return () => {
    var _api$query$imOnline;

    return ((_api$query$imOnline = api.query.imOnline) === null || _api$query$imOnline === void 0 ? void 0 : _api$query$imOnline.receivedHeartbeats) && api.query.imOnline.authoredBlocks ? api.derive.staking.overview().pipe((0, _operators.switchMap)((_ref) => {
      let {
        currentIndex,
        validators
      } = _ref;
      return (0, _rxjs.combineLatest)([(0, _rxjs.of)(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))]);
    }), (0, _operators.map)((_ref2) => {
      let [validators, heartbeats, numBlocks] = _ref2;
      return validators.reduce((result, validator, index) => _objectSpread({}, result, {
        [validator.toString()]: {
          blockCount: numBlocks[index],
          hasMessage: !heartbeats[index].isEmpty,
          isOnline: !heartbeats[index].isEmpty || numBlocks[index].gtn(0)
        }
      }), {});
    }), (0, _util.drr)()) : (0, _rxjs.of)({});
  };
}
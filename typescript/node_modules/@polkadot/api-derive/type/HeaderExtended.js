"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _definitions = _interopRequireDefault(require("@polkadot/types/interfaces/runtime/definitions"));

var _types = require("@polkadot/types");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// We can ignore the properties, added via Struct.with
const _Header = _types.Struct.with(_definitions.default.types.Header);
/**
 * @name HeaderExtended
 * @description
 * A [[Block]] header with an additional `author` field that indicates the block author
 */


class HeaderExtended extends _Header {
  constructor(header, sessionValidators) {
    super(header);
    this._author = void 0;
    this._author = this.extractAuthor(sessionValidators);
  }

  extractAuthor() {
    let sessionValidators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const [pitem] = this.digest.logsWith('PreRuntime'); // extract from the substrate 2.0 PreRuntime digest

    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      return engine.extractAuthor(data, sessionValidators);
    } else {
      const [citem] = this.digest.logsWith('Consensus'); // extract author from the consensus (substrate 1.0, digest)

      if (citem) {
        const [engine, data] = citem.asConsensus;
        return engine.extractAuthor(data, sessionValidators);
      }
    }

    return undefined;
  }
  /**
   * @description Convenience method, returns the author for the block
   */


  get author() {
    return this._author;
  }
  /**
   * @description Creates the JSON representation
   */


  toJSON() {
    return _objectSpread({}, super.toJSON(), {
      author: this.author ? this.author.toJSON() : undefined
    });
  }

}

exports.default = HeaderExtended;
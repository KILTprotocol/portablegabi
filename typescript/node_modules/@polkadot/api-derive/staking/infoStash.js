"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.infoStash = infoStash;

var _operators = require("rxjs/operators");

var _util = require("../util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function parse(stashId, _ref) {
  let [_controllerId, [nominators], rewardDestination, stakers, validatorPrefs, _nextKeys] = _ref;
  return {
    controllerId: _controllerId.unwrapOr(undefined),
    nextKeys: _nextKeys === null || _nextKeys === void 0 ? void 0 : _nextKeys.unwrapOr(undefined),
    nominators,
    rewardDestination,
    stakers,
    stashId,
    validatorPrefs
  };
}

function retrieveV1(api, stashId) {
  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId]]);
}

function retrieveV2(api, stashId) {
  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId], [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]]]);
}

function infoStash(api) {
  const query = api.consts.session ? retrieveV2 : retrieveV1;
  return stashId => query(api, stashId).pipe((0, _operators.map)(result => parse(stashId, result)), (0, _util.drr)());
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overview = overview;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function overview(api) {
  return () => (0, _rxjs.combineLatest)([api.derive.session.indexes(), api.derive.staking.validators()]).pipe((0, _operators.switchMap)((_ref) => {
    let [{
      currentEra,
      currentIndex,
      validatorCount
    }, {
      currentElected,
      validators
    }] = _ref;
    return (0, _rxjs.combineLatest)([(0, _rxjs.of)({
      currentElected,
      currentEra,
      currentIndex,
      validators,
      validatorCount
    }), // this will change on a per block basis, keep it innermost (and it needs eraIndex)
    api.query.staking.currentEraPointsEarned ? api.query.staking.currentEraPointsEarned(currentEra) : (0, _rxjs.of)((0, _types.createType)('EraPoints'))]);
  }), (0, _operators.map)((_ref2) => {
    let [{
      currentElected,
      currentEra,
      currentIndex,
      validators,
      validatorCount
    }, eraPoints] = _ref2;
    return {
      currentElected,
      currentEra,
      currentIndex,
      eraPoints,
      validators,
      validatorCount
    };
  }), (0, _util.drr)());
}
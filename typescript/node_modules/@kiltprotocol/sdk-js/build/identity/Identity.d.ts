/**
 * Identities are a core building block of the KILT SDK.
 * An Identity object represent an **entity** - be it a person, an organization, a machine or some other entity.
 *
 * An Identity object can be built via a seed phrase or other. It has a signature keypair, an associated public address, and an encryption ("boxing") keypair. These are needed to:
 * * create a signed [[Claim]], an [[Attestation]] or other (and verify these later).
 * * encrypt messages between participants.
 *
 * Note: A [[PublicIdentity]] object exposes only public information such as the public address, but doesn't expose any secrets such as private keys.
 *
 * @module Identity
 * @preferred
 */
import { SubmittableExtrinsic } from '@polkadot/api/promise/types';
import Crypto from '../crypto';
import { CryptoInput, EncryptedAsymmetric, EncryptedAsymmetricString } from '../crypto/Crypto';
import PublicIdentity from './PublicIdentity';
declare type BoxPublicKey = PublicIdentity['boxPublicKeyAsHex'] | Identity['boxKeyPair']['publicKey'];
export default class Identity extends PublicIdentity {
    private static ADDITIONAL_ENTROPY_FOR_HASHING;
    /**
     * [STATIC] Generates Mnemonic phrase used to create identities from phrase seed.
     *
     * @returns Randomly generated [[BIP39]](https://www.npmjs.com/package/bip39) mnemonic phrase (Secret phrase).
     * @example ```javascript
     * Identity.generateMnemonic();
     * // returns: "coast ugly state lunch repeat step armed goose together pottery bind mention"
     * ```
     */
    static generateMnemonic(): string;
    /**
     * [STATIC] Builds an identity object from a mnemonic string.
     *
     * @param phraseArg - [[BIP39]](https://www.npmjs.com/package/bip39) Mnemonic word phrase (Secret phrase).
     * @returns An [[Identity]].
     *
     * @example ```javascript
     * const mnemonic = Identity.generateMnemonic();
     * // mnemonic: "coast ugly state lunch repeat step armed goose together pottery bind mention"
     *
     * Identity.buildFromMnemonic(mnemonic);
     * ```
     */
    static buildFromMnemonic(phraseArg?: string): Identity;
    /**
     * [STATIC] Builds an [[Identity]], generated from a seed hex string.
     *
     * @param seedArg - Seed as hex string (Starting with 0x).
     * @returns  An [[Identity]].
     * @example ```javascript
     * const seed =
     *   '0x6ce9fd060c70165c0fc8da25810d249106d5df100aa980e0d9a11409d6b35261';
     * Identity.buildFromSeedString(seed);
     * ```
     */
    static buildFromSeedString(seedArg: string): Identity;
    /**
     * [STATIC] Builds a new [[Identity]], generated from a seed (Secret Seed).
     *
     * @param seed - A seed as an Uint8Array with 24 arbitrary numbers.
     * @returns An [[Identity]].
     * @example ```javascript
     * // prettier-ignore
     * const seed = new Uint8Array([108, 233, 253,  6,  12, 112,  22,  92,
     *                               15, 200, 218, 37, 129,  13,  36, 145,
     *                                6, 213, 223, 16,  10, 169, 128, 224,
     *                              217, 161,  20,  9, 214, 179,  82,  97
     *                            ]);
     * Identity.buildFromSeed(seed);
     * ```
     */
    static buildFromSeed(seed: Uint8Array): Identity;
    /**
     * [STATIC] Builds a new [[Identity]], generated from a uniform resource identifier (URIs).
     *
     * @param uri - Standard identifiers.
     * @returns  An [[Identity]].
     * @example ```javascript
     * Identity.buildFromURI('//Bob');
     * ```
     */
    static buildFromURI(uri: string): Identity;
    readonly seed: Uint8Array;
    readonly seedAsHex: string;
    readonly signPublicKeyAsHex: string;
    private constructor();
    private readonly signKeyringPair;
    private readonly boxKeyPair;
    /**
     * Returns the [[PublicIdentity]] (identity's address and public key) of the Identity.
     * Can be given to third-parties to communicate and process signatures.
     *
     * @returns The [[PublicIdentity]], corresponding to the [[Identity]].
     * @example ```javascript
     * const alice = Kilt.Identity.buildFromMnemonic();
     * alice.getPublicIdentity();
     * ```
     */
    getPublicIdentity(): PublicIdentity;
    /**
     * Signs data with an [[Identity]] object's key.
     *
     * @param cryptoInput - The data to be signed.
     * @returns The signed data.
     * @example  ```javascript
     * const alice = Identity.buildFromMnemonic();
     * const data = 'This is a test';
     * alice.sign(data);
     * // (output) Uint8Array [
     * //           205, 120,  29, 236, 152, 144, 114, 133,  65, ...
     * //          ]
     * ```
     */
    sign(cryptoInput: CryptoInput): Uint8Array;
    /**
     * Signs data with an [[Identity]] object's key returns it as string.
     *
     * @param cryptoInput - The data to be signed.
     * @returns The signed data.
     * @example ```javascript
     * identity.signStr(data);
     * ```
     */
    signStr(cryptoInput: CryptoInput): string;
    /**
     * Encrypts data asymmetrically and returns it as string.
     *
     * @param cryptoInput - The data to be encrypted.
     * @param boxPublicKey - The public key of the receiver of the encrypted data.
     * @returns The encrypted data.
     * @example ```javascript
     * const alice = Identity.buildFromMnemonic('car dog ...');
     * const bob = new PublicIdentity('523....', '0xab1234...');
     *
     * const messageStr = 'This is a test';
     * alice.encryptAsymmetricAsStr(messageStr, bob.boxPublicKeyAsHex);
     * // (output) EncryptedAsymmetricString {
     * //           box: '0xd0b556c4438270901662ff2d3e9359f244f211a225d66dcf74b64f814a92',
     * //           nonce: '0xe4c82d261d1f8fc8a0cf0bbd524530afcc5b201541827580'
     * //          }
     * ```
     */
    encryptAsymmetricAsStr(cryptoInput: CryptoInput, boxPublicKey: BoxPublicKey): Crypto.EncryptedAsymmetricString;
    /**
     * Decrypts data asymmetrical and returns it as string.
     *
     * @param encrypted - The encrypted data.
     * @param boxPublicKey - The public key of the sender of the encrypted data.
     * @returns The decrypted data.
     * @example  ```javascript
     * const alice = new PublicIdentity('74be...', '0xeb98765...');
     * const bob = Identity.buildFromMnemonic('house cat ...');
     *
     * const encryptedData = {
     *   box: '0xd0b556c4438270901662ff2d3e9359f244f211a225d66dcf74b64f814a92',
     *   nonce: '0xe4c82d261d1f8fc8a0cf0bbd524530afcc5b201541827580',
     * };
     *
     * bob.decryptAsymmetricAsStr(encryptedData, alice.boxPublicKeyAsHex);
     * // (output) "This is a test"
     * ```
     */
    decryptAsymmetricAsStr(encrypted: EncryptedAsymmetric | EncryptedAsymmetricString, boxPublicKey: BoxPublicKey): string | false;
    /**
     * Encrypts data asymmetrically and returns it as a byte array.
     *
     * @param input - The data to be encrypted.
     * @param boxPublicKey - The public key of the receiver of the encrypted data.
     * @returns The encrypted data.
     * @example ```javascript
     * const alice = Identity.buildFromMnemonic('car dog ...');
     * const bob = new PublicIdentity('523....', '0xab1234...');
     *
     * const message = 'This is a test';
     * const data = stringToU8a(message);
     * alice.encryptAsymmetric(data, bob.boxPublicKeyAsHex);
     * // (output) EncryptedAsymmetric {
     * //           box: Uint8Array [ 56,  27,   2, 254, ... ],
     * //           nonce: Uint8Array [ 76, 23, 145, 216, ...]
     * //         }
     * ```
     */
    encryptAsymmetric(input: CryptoInput, boxPublicKey: BoxPublicKey): Crypto.EncryptedAsymmetric;
    /**
     * Decrypts data asymmetrical and returns it as a byte array.
     *
     * @param encrypted - The encrypted data.
     * @param boxPublicKey - The public key of the sender of the encrypted data.
     * @returns The decrypted data.
     * @example ```javascript
     * const alice = new PublicIdentity('74be...', '0xeb98765...');
     * const bob = Identity.buildFromMnemonic('house cat ...');
     *
     * const encryptedData = {
     *   box: '0xd0b556c4438270901662ff2d3e9359f244f211a225d66dcf74b64f814a92',
     *   nonce: '0xe4c82d261d1f8fc8a0cf0bbd524530afcc5b201541827580',
     * };
     *
     * bob.decryptAsymmetric(encryptedData, alice.boxPublicKeyAsHex);
     * // (output) "This is a test"
     * ```
     */
    decryptAsymmetric(encrypted: EncryptedAsymmetric | EncryptedAsymmetricString, boxPublicKey: BoxPublicKey): false | Uint8Array;
    /**
     * Signs a submittable extrinsic (transaction), in preparation to pushing it to the blockchain.
     *
     * @param submittableExtrinsic - A chain transaction.
     * @param nonceAsHex - The nonce of the address operating the transaction.
     * @returns The signed SubmittableExtrinsic.
     * @example ```javascript
     * const alice = Identity.buildFromMnemonic('car dog ...');
     * const tx = await blockchain.api.tx.ctype.add(ctype.hash);
     * const nonce = await blockchain.api.query.system.accountNonce(alice.address);
     * alice.signSubmittableExtrinsic(tx, nonce.tohex());
     * ```
     */
    signSubmittableExtrinsic(submittableExtrinsic: SubmittableExtrinsic, nonceAsHex: string): SubmittableExtrinsic;
    private static createBoxKeyPair;
}
export {};

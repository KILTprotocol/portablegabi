/**
 * @module Identity
 */
import IPublicIdentity from '../types/PublicIdentity';
export interface IURLResolver {
    resolve(url: string): Promise<object | null>;
}
export default class PublicIdentity implements IPublicIdentity {
    /**
     * [STATIC] Creates a new Public Identity from a DID document (DID - Decentralized Identifiers: https://w3c-ccg.github.io/did-spec/).
     *
     * @param didDocument - Contains the public key, external ID and service endpoint.
     * @returns A new [[PublicIdentity]] object.
     * @example ```javascript
     * const didDocument = {
     *   id: 'did:kilt:1234567',
     *   authentication: {
     *     type: 'Ed25519SignatureAuthentication2018',
     *     publicKey: ['did:kilt:1234567#key-1'],
     *   },
     *   publicKey: [
     *     {
     *       id: 'did:kilt:1234567#key-1',
     *       type: 'Ed25519VerificationKey2018',
     *       controller: 'did:kilt:1234567',
     *       publicKeyHex: '0x25346245...',
     *     },
     *     {
     *       id: 'did:kilt:1234567#key-2',
     *       type: 'X25519Salsa20Poly1305Key2018',
     *       controller: 'did:kilt:1234567',
     *       publicKeyHex: '0x98765456...',
     *     },
     *   ],
     *   service: [
     *     {
     *       type: 'KiltMessagingService',
     *       serviceEndpoint: 'http://services.kilt.io/messaging',
     *     },
     *   ],
     * };
     * PublicIdentity.fromDidDocument(didDocument);
     * ```
     */
    static fromDidDocument(didDocument: object): IPublicIdentity | null;
    /**
     * [STATIC] [ASYNC] Resolves a decentralized identifier (DID) into a [[PublicIdentity]].
     *
     * @param identifier - The Decentralized Identifier to be resolved.
     * @param urlResolver  - A URL resolver, which is used to query the did document.
     * @returns A new [[PublicIdentity]] object.
     * @example ```javascript
     * const urlResolver = {
     *   resolve: (url: string) => {
     *     return fetch(url)
     *       .then(response => response.json());
     *   },
     * };
     * const identifier = 'did:kilt:1234567';
     * PublicIdentity.resolveFromDid(identifier, urlResolver);
     * ```
     */
    static resolveFromDid(identifier: string, urlResolver: IURLResolver): Promise<IPublicIdentity | null>;
    readonly address: IPublicIdentity['address'];
    readonly boxPublicKeyAsHex: IPublicIdentity['boxPublicKeyAsHex'];
    readonly serviceAddress?: IPublicIdentity['serviceAddress'];
    /**
     * Builds a new [[PublicIdentity]] instance.
     *
     * @param address - A public address.
     * @param boxPublicKeyAsHex - The public encryption key.
     * @param serviceAddress - The address of the service used to retreive the DID.
     * @example ```javascript
     * new PublicIdentity(address, boxPublicKeyAsHex, serviceAddress);
     * ```
     */
    constructor(address: IPublicIdentity['address'], boxPublicKeyAsHex: IPublicIdentity['boxPublicKeyAsHex'], serviceAddress?: IPublicIdentity['serviceAddress']);
    private static getJSONProperty;
}

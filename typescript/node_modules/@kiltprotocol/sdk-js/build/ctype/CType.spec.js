"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const CType_1 = tslib_1.__importDefault(require("./CType"));
const Identity_1 = tslib_1.__importDefault(require("../identity/Identity"));
const crypto_1 = tslib_1.__importDefault(require("../crypto"));
const TxStatus_1 = tslib_1.__importDefault(require("../blockchain/TxStatus"));
const Claim_1 = tslib_1.__importDefault(require("../claim/Claim"));
jest.mock('../blockchainApiConnection/BlockchainApiConnection');
describe('CType', () => {
    const ctypeModel = {
        schema: {
            $id: 'http://example.com/ctype-1',
            $schema: 'http://kilt-protocol.org/draft-01/ctype#',
            properties: {
                'first-property': { type: 'integer' },
                'second-property': { type: 'string' },
            },
            type: 'object',
        },
        metadata: {
            title: { default: 'CType Title' },
            description: {},
            properties: {
                'first-property': { title: { default: 'First Property' } },
                'second-property': { title: { default: 'Second Property' } },
            },
        },
    };
    const rawCtype = {
        schema: {
            $id: 'http://example.com/ctype-1',
            $schema: 'http://kilt-protocol.org/draft-01/ctype#',
            properties: {
                name: { type: 'string' },
            },
            type: 'object',
        },
        metadata: {
            title: { default: 'CType Title' },
            description: {},
            properties: {
                name: { title: { default: 'Name' } },
            },
        },
    };
    const claimCtype = new CType_1.default(rawCtype);
    const identityAlice = Identity_1.default.buildFromURI('//Alice');
    const claimContents = {
        name: 'Bob',
    };
    const claim = new Claim_1.default(claimCtype, claimContents, identityAlice);
    it('stores ctypes', async () => {
        const testHash = crypto_1.default.hashStr('1234');
        const ctype = new CType_1.default(ctypeModel);
        ctype.hash = testHash;
        const resultCtype = Object.assign(Object.assign({}, ctype), { owner: identityAlice.address });
        const resultTxStatus = new TxStatus_1.default('Finalized', crypto_1.default.hashStr('987654'));
        require('../blockchain/Blockchain').default.__mockResultHash = resultTxStatus;
        const result = await ctype.store(identityAlice);
        expect(result.type).toEqual(resultTxStatus.type);
        expect(result.payload).toMatchObject(resultCtype);
    });
    it('verifies the claim structure', () => {
        expect(claimCtype.verifyClaimStructure(claim)).toBeTruthy();
        expect(claimCtype.verifyClaimStructure(!claim)).toBeFalsy();
    });
    it('throws error on wrong ctype hash', () => {
        const wrongRawCtype = Object.assign(Object.assign({}, rawCtype), { hash: '0x1234' });
        expect(() => {
            return new CType_1.default(wrongRawCtype);
        }).toThrow();
    });
});
//# sourceMappingURL=CType.spec.js.map